---

---

<nav
	transition:persist='logo'
	id='title'
	class='relative order-1 mr-auto flex w-56 hover:opacity-70 sm:flex'
	aria-label='global'
>
	<a transition:persist='test' class='align-self-start' href='/' aria-label='Logo'>
		<canvas
			id='rive-canvas'
			width='512'
			height='70'
			class='mr-4 h-full w-full opacity-95 transition-opacity dark:invert'
		>
		</canvas>
	</a>
</nav>

<script>
	import { Rive, StateMachineInput, StateMachineInputType } from '@rive-app/canvas/rive'
	const options = {
		src: '/logo.riv',
		stateMachines: 'State Machine',
		autoplay: true
	}

	const canvas = document.querySelector<HTMLCanvasElement>('#rive-canvas') as HTMLCanvasElement
	if (!canvas) {
		throw new Error('Could not find canvas')
	}

	const titleDiv = document.querySelector<HTMLDivElement>('#title')
	if (!titleDiv) {
		throw new Error('Could not find title div')
	}

	const attach = (r: Rive) => {
		r.setTextRunValue('NameText', 'Michael Payne')
		r.setTextRunValue('CursorText', '█████████████')
		r.resizeDrawingSurfaceToCanvas()

		// Get the inputs via the name of the state machine
		const inputs = r.stateMachineInputs('State Machine')
		// Find the input you want to set a value for, or trigger
		const hoverInput = inputs.find((i) => i.name === 'isHovered')
		if (!hoverInput) {
			throw new Error('Could not find hover input')
		}
		if (hoverInput.type !== StateMachineInputType.Boolean) {
			throw new Error('Input is not a boolean')
		}
		registerEvents(r, hoverInput)
	}

	const registerEvents = (r: Rive, hoverInput: StateMachineInput) => {
		titleDiv.onmouseover = () => {
			hoverInput.value = true
		}
		titleDiv.onmouseout = () => {
			hoverInput.value = false
		}

		window.matchMedia('(min-width: 768px)').onchange = () => {
			r.resizeDrawingSurfaceToCanvas()
		}
	}

	document.addEventListener('DOMContentLoaded', () => {
		const r = new Rive({
			canvas,
			...options,
			onLoad: () => {
				attach(r)
			}
		})
	})
</script>
