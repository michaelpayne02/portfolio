---
export const prerender = false

import Comments from './Comments.astro'
import Likes from './Likes.astro'
import type {
  WebmentionsCache,
  WebmentionsChildren,
  WebmentionsFeed
} from '@/types'

import { WEBMENTION_API_KEY } from 'astro:env/server'

// const cachePath = 'webmentions.json'
const validWebmentionTypes = ['like-of', 'mention-of', 'in-reply-to']

const { COMMENTS } = Astro.locals.runtime.env

// Calls webmention.io api.
async function fetchWebmentions(
  target: URL,
  timeFrom: string | null,
  perPage = 1000
) {
  if (!import.meta.env.SITE || !import.meta.env.SITE.startsWith('https://')) {
    console.warn('Must use a https site. Please set in astro.config.ts')
    return null
  }

  if (!WEBMENTION_API_KEY) {
    console.warn('No webmention api token specified in .env')
    return null
  }

  let url = `https://webmention.io/api/mentions.jf2?target=${target}&token=${WEBMENTION_API_KEY}&sort-dir=up&per-page=${perPage}`

  if (timeFrom) url += `&since${timeFrom}`

  const res = await fetch(url)

  if (res.ok) {
    const data = (await res.json()) as WebmentionsFeed
    return data
  }

  return null
}

// Merge cached entries [a] with fresh webmentions [b], merge by wm-id
function mergeWebmentions(
  a: WebmentionsCache,
  b: WebmentionsFeed
): WebmentionsChildren[] {
  return Array.from(
    [...a.children, ...b.children]
      .reduce((map, obj) => map.set(obj['wm-id'], obj), new Map())
      .values()
  )
}

// filter out WebmentionChildren
export function filterWebmentions(webmentions: WebmentionsChildren[]) {
  return webmentions.filter((webmention) => {
    // make sure the mention has a property so we can sort them later
    if (!validWebmentionTypes.includes(webmention['wm-property'])) return false

    // make sure 'mention-of' or 'in-reply-to' has text content.
    if (
      webmention['wm-property'] === 'mention-of' ||
      webmention['wm-property'] === 'in-reply-to'
    ) {
      return webmention.content && webmention.content.text !== ''
    }

    return true
  })
}

// save mentions for page to cloudflare KV
async function writeToCache(target: URL, data: WebmentionsCache) {
  COMMENTS.put(target.toString(), JSON.stringify(data))
}

async function getFromCache(target: URL): Promise<WebmentionsCache> {
  const emptyCache: WebmentionsCache = { lastFetched: null, children: [] }
  const data = await COMMENTS.get(target.toString())
  if (!data) return emptyCache
  return JSON.parse(data) as WebmentionsCache
}

async function getAndCacheWebmentions(target: URL) {
  const cache = await getFromCache(target)
  const mentions = await fetchWebmentions(target, cache.lastFetched)

  if (mentions) {
    mentions.children = filterWebmentions(mentions.children)
    const webmentions: WebmentionsCache = {
      lastFetched: new Date().toISOString(),
      // Make sure the first arg is the cache
      children: mergeWebmentions(cache, mentions)
    }

    writeToCache(target, webmentions)
    return webmentions
  }

  return cache
}

const url = new URL(Astro.url.pathname, Astro.site)
const webMentions = await getAndCacheWebmentions(url).then((w) => w.children)
---

{
  !!webMentions.length && (
    <>
      <hr class='border-solid' />
      <h2 class='mb-8 before:hidden'>Comments</h2>
      <div class='space-y-10'>
        <Likes mentions={webMentions} />
        <Comments mentions={webMentions} />
      </div>
      <p class='mt-8'>
        Responses powered by{' '}
        <a
          href='https://webmention.io'
          rel='noopener noreferrer'
          target='_blank'
        >
          Webmentions
        </a>
      </p>
    </>
  )
}
