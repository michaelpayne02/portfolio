---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import Search from 'astro-pagefind/components/Search'
const q = Astro.url.searchParams.get('q') ?? undefined
---

<site-search class='ms-2 sm:ms-4' id='search'>
	<button
		data-open-modal
		disabled
		class='m-auto h-8 w-8 rounded-md border border-border transition-all hover:bg-border'
	>
		<svg
			xmlns='http://www.w3.org/2000/svg'
			aria-label='search'
			viewBox='0 0 24 24'
			stroke-width='1.5'
			class='m-auto h-6 w-6 fill-none stroke-current'
		>
			<path
				stroke-linecap='round'
				stroke-linejoin='round'
				d='m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z'></path>
		</svg>
	</button>
	<dialog
		aria-label='search'
		class='h-2/3 max-h-fit w-full max-w-full border border-border bg-background shadow backdrop:backdrop-blur sm:mx-auto sm:mb-auto sm:mt-16 sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-2xl'
	>
		<div class='dialog-frame flex flex-col gap-4 p-6 pt-12 sm:pt-6'>
			<Search id='search' className='pagefind-ui' query={q} uiOptions={{ showImages: false }} />
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		private dialog: HTMLDialogElement
		private dialogFrame: HTMLDivElement
		private openBtn: HTMLButtonElement

		closeModal = () => {
			if (this.dialog.open) {
				this.dialog.close()
				window.removeEventListener('click', this.onWindowClick)
			}
		}

		onWindowClick = (event: MouseEvent) => {
			// check if it's a link
			const isLink = 'href' in (event.target || {})
			// make sure the click is either a link or outside of the dialog
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.dialogFrame.contains(event.target as Node))
			)
				this.closeModal()
		}

		onWindowKeydown = (e: KeyboardEvent) => {
			// check if it's the / key
			if (e.key === '/' && !this.dialog.open) {
				this.openModal()
				e.preventDefault()
			}
		}

		openModal = (event?: MouseEvent) => {
			this.dialog.showModal()
			this.querySelector('input')?.focus()
			event?.stopPropagation()
			window.addEventListener('click', this.onWindowClick)
		}

		constructor() {
			super()
			this.openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!
			this.dialog = this.querySelector('dialog')!
			this.dialogFrame = this.querySelector('.dialog-frame')!

			this.openBtn.addEventListener('click', this.openModal)
			this.openBtn.disabled = false
		}

		connectedCallback() {
			// Listen for keyboard shortcut
			window.addEventListener('keydown', this.onWindowKeydown)
		}

		disconnectedCallback() {
			window.removeEventListener('keydown', this.onWindowKeydown)
		}
	}

	customElements.define('site-search', SiteSearch)
</script>

<style>
	:root {
		--pagefind-ui-font: inherit;
		--pagefind-ui-primary: theme('colors.primary.foreground');
		--pagefind-ui-text: theme('colors.foreground');
		--pagefind-ui-background: theme('colors.background');
		--pagefind-ui-border: theme('colors.border');
		--pagefind-ui-tag: theme('colors.muted.foreground');
		--pagefind-ui-border-width: 1px;
		--pagefind-ui-border-radius: 1rem;
	}
</style>
