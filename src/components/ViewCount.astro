---
const path = Astro.url.pathname == '/' ? '/index' : Astro.url.pathname
---

<view-count class='text-sm text-muted-foreground' data-path={path}>
	<span id='viewcount' class='font-mono'>---</span>
	views
</view-count>

<script>
	interface Views {
		slug: string
		count: number
	}
	class ViewCount extends HTMLElement {
		constructor() {
			super()

			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1))
			onIdle(async () => {
				const viewcount = document.querySelector<ViewCount>('view-count') as HTMLSpanElement
				const span = document.querySelector<HTMLSpanElement>('#viewcount') as HTMLSpanElement
				const path = viewcount.dataset.path

				const res = await fetch('/api/views' + path)
				const json = (await res.json()) as Views
				if (!res.ok) {
					throw new Error('Unable to load viewcount')
				}
				//ts-ignore
				span.textContent = abbreviateNumber(json.count || 0)
			})
		}
	}
	const abbreviateNumber = (value: number): string => {
		// if (value === 0) return '---'
		if (value < 1000) {
			return value.toString()
		}

		const suffixes = ['', 'k', 'm', 'b', 't']
		const suffixNum = Math.floor(('' + value).length / 3)
		if (suffixNum > 4) return value.toString()
		let shortValue = 0

		for (var precision = 2; precision >= 1; precision--) {
			shortValue = parseFloat(
				(suffixNum != 0 ? value / Math.pow(1000, suffixNum) : value).toPrecision(precision)
			)
			var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '')
			if (dotLessShortValue.length <= 2) {
				break
			}
		}

		if (shortValue % 1 != 0) return shortValue.toFixed(1) + suffixes[suffixNum]
		return shortValue + (suffixes[suffixNum] ?? '')
	}
	customElements.define('view-count', ViewCount)
</script>
