---
import { Icon } from 'astro-icon/components'
---

<theme-toggle class='ms-2 sm:ms-4'>
	<button class='relative size-8 rounded-md border border-border transition-all hover:bg-border'>
		<span class='sr-only'>Dark Theme</span>
		<Icon
			name='heroicons:sun'
			size={24}
			class='absolute start-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rotate-180 scale-0 fill-none stroke-current opacity-0 transition-all dark:rotate-0 dark:scale-100 dark:opacity-100'
		/>
		<Icon
			name='heroicons:moon'
			size={24}
			class='absolute start-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rotate-0 scale-100 fill-none stroke-current opacity-100 transition-all dark:rotate-180 dark:scale-0 dark:opacity-0'
		/>
	</button>
</theme-toggle>

<script>
	// Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute

	function rootInDarkMode() {
		return document.documentElement.getAttribute('data-theme') === 'dark'
	}
	class ThemeToggle extends HTMLElement {
		#controller: AbortController | undefined

		connectedCallback() {
			const button = this.querySelector<HTMLButtonElement>('button') as HTMLButtonElement
			// set aria role value
			button.setAttribute('role', 'switch')
			button.setAttribute('aria-checked', String(rootInDarkMode()))
			// Abort signal
			const { signal } = (this.#controller = new AbortController())

			// button event
			button.addEventListener(
				'click',
				() => {
					// invert theme
					let themeChangeEvent = new CustomEvent('theme-change', {
						detail: {
							theme: rootInDarkMode() ? 'light' : 'dark'
						}
					})
					// dispatch event -> ThemeProvider.astro
					document.dispatchEvent(themeChangeEvent)

					// set the aria-checked attribute
					button.setAttribute('aria-checked', String(rootInDarkMode()))
				},
				{ signal }
			)
		}

		disconnectedCallback() {
			this.#controller?.abort()
		}
	}

	customElements.define('theme-toggle', ThemeToggle)
</script>
