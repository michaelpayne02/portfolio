---
export const prerender = false

import Email from '@/emails/Contact.tsx'
import AuthorEmail from '@/emails/ContactAuthor.tsx'
import PageLayout from '@/layouts/Base.astro'
import { siteConfig } from '@/site-config'
import { Resend } from 'resend'

const errors = { fullName: '', email: '', message: '' }
if (Astro.request.method === 'POST') {
	try {
		const data = await Astro.request.formData()
		const fullName = data.get('fullName')
		const email = data.get('email')
		const message = data.get('message')
		if (typeof fullName !== 'string' || fullName.length < 1) {
			errors.fullName += 'Please enter a name. '
		}
		if (typeof email !== 'string' || email.length < 1) {
			errors.email += 'Please enter an email address. '
		}
		if (typeof message !== 'string' || message.length < 1) {
			errors.message += 'No message specified'
		}

		const hasErrors = Object.values(errors).some((msg) => msg)
		if (!hasErrors) {
			const resend = new Resend(Astro.locals.runtime.env.RESEND_API_KEY)
			if (
				typeof fullName !== 'string' ||
				typeof email !== 'string' ||
				typeof message !== 'string'
			) {
				throw new Error('Invalid data')
			}
			const firstName = fullName.split(' ')[0]!
			await resend.emails.send({
				from: siteConfig.contactEmail,
				to: email.toString(),
				subject: 'Message Received',
				react: Email({ firstName })
			})
			await resend.emails.send({
				from: siteConfig.contactEmail,
				to: Astro.locals.runtime.env.AUTHOR_EMAIL,
				subject: `Message from ${fullName}`,
				reply_to: email,
				react: AuthorEmail({ fullName, message })
			})
			return Astro.redirect('/contact/thanks', 307)
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message)
		}
	}
}

const meta = {
	description: 'Conatact',
	title: 'Contact'
}
---

<PageLayout meta={meta}>
	<div class='m-10 flex flex w-full flex-col justify-center text-center sm:w-2/3'>
		<h2 class='text-2xl font-bold'>Contact</h2>
		<form class='mt-8 flex flex-col items-center gap-y-7' action='/contact' method='post'>
			<label class='flex w-full flex-col'>
				<span>Name</span>
				<input
					required
					name='fullName'
					type='text'
					class='mt-1 rounded-md border-border bg-input p-2 shadow-sm hover:border-foreground/25 hover:shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
				/>
			</label>
			{errors.fullName && <p class='text-red-500'>{errors.fullName}</p>}
			<label class='flex w-full flex-col'>
				<span>Email address</span>
				<input
					name='email'
					type='email'
					class='mt-1 rounded-md border-border bg-input p-2 shadow-sm hover:border-foreground/25 hover:shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
					placeholder='email@example.com'
				/>
			</label>
			{errors.email && <p class='text-red-500'>{errors.email}</p>}
			<label class='flex w-full flex-col'>
				<span>Message</span>
				<textarea
					required
					name='message'
					class='mt-1 rounded-md border-border bg-input p-2 shadow-sm hover:border-foreground/25 hover:shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
				></textarea>
			</label>
			{errors.message && <p class='text-red-500'>{errors.message}</p>}
			<button class='rounded-md border-border bg-secondary p-2' type='submit'>Submit</button>
		</form>
	</div>
</PageLayout>
