---
export const prerender = false

import PageLayout from '@/layouts/Base.astro'
import { actions, getActionProps, isInputError } from 'astro:actions'

const { RECAPTCHA_SITE_KEY } = Astro.locals.runtime.env

const result = Astro.getActionResult(actions.contact)

const inputError = isInputError(result?.error) ? result.error : null
const error = !inputError ? result?.error : null

if (result?.data?.success) {
  return Astro.redirect('/contact/thanks', 307)
}

let formData: FormData | undefined = undefined
if (Astro.request.method === 'POST') {
  formData = await Astro.request.formData()
}

const meta = {
  description: 'Conatact',
  title: 'Contact'
}
---

<script is:inline src='https://www.google.com/recaptcha/api.js'></script>

<script is:inline>
  function onSubmit(token) {
    document.querySelector('input[name=captcha]').value = token

    let form = document.querySelector('#contact')
    if (form.reportValidity()) form.submit()
  }
</script>

<PageLayout {meta}>
  <div
    class='m-10 flex flex w-full flex-col justify-center text-center sm:w-2/3'
  >
    <h2 class='text-2xl font-bold'>Contact</h2>
    <div class='flex flex-col gap-2'>
      {error && <div class='text-red-500'>{error.message}</div>}
      <form
        id='contact'
        class='mt-8 flex flex-col items-center gap-y-7'
        method='post'
      >
        <input {...getActionProps(actions.contact)} />
        <label class='flex w-full flex-col'>
          <span>Name</span>
          {
            inputError?.fields?.fullName && (
              <span class='text-red-500'>{inputError.fields.fullName}</span>
            )
          }
          <input
            required
            name='fullName'
            type='text'
            value={formData?.get('fullName')?.toString()}
            minlength='2'
            class='mt-1 rounded-md border border-border bg-primary-foreground p-2 shadow-sm hover:border-foreground/25 hover:shadow-md'
          />
        </label>
        <label class='flex w-full flex-col'>
          <span>Email address</span>
          {
            inputError?.fields?.email && (
              <span class='text-red-500'>{inputError.fields.email}</span>
            )
          }
          <input
            name='email'
            type='email'
            value={formData?.get('email')?.toString()}
            class='mt-1 rounded-md border border-border bg-primary-foreground p-2 shadow-sm hover:border-foreground/25'
            placeholder='email@example.com'
          />
        </label>
        <label class='flex w-full flex-col'>
          <span>Message</span>
          {
            inputError?.fields?.message && (
              <span class='text-red-500'>{inputError.fields.message}</span>
            )
          }
          <textarea
            required
            name='message'
            minlength='2'
            class='mt-1 h-24 rounded-md border border-border bg-primary-foreground p-2 shadow-sm hover:border-foreground/25'
            >{formData?.get('message')?.toString()}</textarea
          >
        </label>
        <input type='hidden' name='captcha' />
        {
          inputError?.fields?.captcha && (
            <span class='text-red-500'>{inputError.fields.captcha}</span>
          )
        }
        <button
          class='g-recaptcha rounded-lg border border-border bg-primary-foreground px-4 py-1 transition hover:bg-border/25'
          type='submit'
          data-sitekey={RECAPTCHA_SITE_KEY}
          data-callback='onSubmit'
          data-action='contact'>Submit</button
        >
      </form>
    </div>
  </div>
</PageLayout>
